// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto;
namespace demo {
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace demo
PROTOBUF_NAMESPACE_OPEN
template<> ::demo::Config* Arena::CreateMaybeMessage<::demo::Config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace demo {

// ===================================================================

class Config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.Config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2eproto);
    return ::descriptor_table_config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kPortFieldNumber = 2,
    kTracerLibraryFieldNumber = 3,
    kTracerConfigurationFieldNumber = 4,
  };
  // string host = 1;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string port = 2;
  void clear_port();
  const std::string& port() const;
  void set_port(const std::string& value);
  void set_port(std::string&& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  std::string* mutable_port();
  std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // string tracer_library = 3;
  void clear_tracer_library();
  const std::string& tracer_library() const;
  void set_tracer_library(const std::string& value);
  void set_tracer_library(std::string&& value);
  void set_tracer_library(const char* value);
  void set_tracer_library(const char* value, size_t size);
  std::string* mutable_tracer_library();
  std::string* release_tracer_library();
  void set_allocated_tracer_library(std::string* tracer_library);
  private:
  const std::string& _internal_tracer_library() const;
  void _internal_set_tracer_library(const std::string& value);
  std::string* _internal_mutable_tracer_library();
  public:

  // .google.protobuf.Struct tracer_configuration = 4;
  bool has_tracer_configuration() const;
  private:
  bool _internal_has_tracer_configuration() const;
  public:
  void clear_tracer_configuration();
  const PROTOBUF_NAMESPACE_ID::Struct& tracer_configuration() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_tracer_configuration();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_tracer_configuration();
  void set_allocated_tracer_configuration(PROTOBUF_NAMESPACE_ID::Struct* tracer_configuration);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_tracer_configuration() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_tracer_configuration();
  public:

  // @@protoc_insertion_point(class_scope:demo.Config)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tracer_library_;
  PROTOBUF_NAMESPACE_ID::Struct* tracer_configuration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_config_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config

// string host = 1;
inline void Config::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Config::host() const {
  // @@protoc_insertion_point(field_get:demo.Config.host)
  return _internal_host();
}
inline void Config::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:demo.Config.host)
}
inline std::string* Config::mutable_host() {
  // @@protoc_insertion_point(field_mutable:demo.Config.host)
  return _internal_mutable_host();
}
inline const std::string& Config::_internal_host() const {
  return host_.GetNoArena();
}
inline void Config::_internal_set_host(const std::string& value) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Config::set_host(std::string&& value) {
  
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.Config.host)
}
inline void Config::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.Config.host)
}
inline void Config::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.Config.host)
}
inline std::string* Config::_internal_mutable_host() {
  
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Config::release_host() {
  // @@protoc_insertion_point(field_release:demo.Config.host)
  
  return host_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:demo.Config.host)
}

// string port = 2;
inline void Config::clear_port() {
  port_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Config::port() const {
  // @@protoc_insertion_point(field_get:demo.Config.port)
  return _internal_port();
}
inline void Config::set_port(const std::string& value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:demo.Config.port)
}
inline std::string* Config::mutable_port() {
  // @@protoc_insertion_point(field_mutable:demo.Config.port)
  return _internal_mutable_port();
}
inline const std::string& Config::_internal_port() const {
  return port_.GetNoArena();
}
inline void Config::_internal_set_port(const std::string& value) {
  
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Config::set_port(std::string&& value) {
  
  port_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.Config.port)
}
inline void Config::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.Config.port)
}
inline void Config::set_port(const char* value, size_t size) {
  
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.Config.port)
}
inline std::string* Config::_internal_mutable_port() {
  
  return port_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Config::release_port() {
  // @@protoc_insertion_point(field_release:demo.Config.port)
  
  return port_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:demo.Config.port)
}

// string tracer_library = 3;
inline void Config::clear_tracer_library() {
  tracer_library_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Config::tracer_library() const {
  // @@protoc_insertion_point(field_get:demo.Config.tracer_library)
  return _internal_tracer_library();
}
inline void Config::set_tracer_library(const std::string& value) {
  _internal_set_tracer_library(value);
  // @@protoc_insertion_point(field_set:demo.Config.tracer_library)
}
inline std::string* Config::mutable_tracer_library() {
  // @@protoc_insertion_point(field_mutable:demo.Config.tracer_library)
  return _internal_mutable_tracer_library();
}
inline const std::string& Config::_internal_tracer_library() const {
  return tracer_library_.GetNoArena();
}
inline void Config::_internal_set_tracer_library(const std::string& value) {
  
  tracer_library_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Config::set_tracer_library(std::string&& value) {
  
  tracer_library_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:demo.Config.tracer_library)
}
inline void Config::set_tracer_library(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tracer_library_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:demo.Config.tracer_library)
}
inline void Config::set_tracer_library(const char* value, size_t size) {
  
  tracer_library_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:demo.Config.tracer_library)
}
inline std::string* Config::_internal_mutable_tracer_library() {
  
  return tracer_library_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Config::release_tracer_library() {
  // @@protoc_insertion_point(field_release:demo.Config.tracer_library)
  
  return tracer_library_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_tracer_library(std::string* tracer_library) {
  if (tracer_library != nullptr) {
    
  } else {
    
  }
  tracer_library_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tracer_library);
  // @@protoc_insertion_point(field_set_allocated:demo.Config.tracer_library)
}

// .google.protobuf.Struct tracer_configuration = 4;
inline bool Config::_internal_has_tracer_configuration() const {
  return this != internal_default_instance() && tracer_configuration_ != nullptr;
}
inline bool Config::has_tracer_configuration() const {
  return _internal_has_tracer_configuration();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Config::_internal_tracer_configuration() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = tracer_configuration_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct*>(
      &PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Config::tracer_configuration() const {
  // @@protoc_insertion_point(field_get:demo.Config.tracer_configuration)
  return _internal_tracer_configuration();
}
inline PROTOBUF_NAMESPACE_ID::Struct* Config::release_tracer_configuration() {
  // @@protoc_insertion_point(field_release:demo.Config.tracer_configuration)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = tracer_configuration_;
  tracer_configuration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Config::_internal_mutable_tracer_configuration() {
  
  if (tracer_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaNoVirtual());
    tracer_configuration_ = p;
  }
  return tracer_configuration_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Config::mutable_tracer_configuration() {
  // @@protoc_insertion_point(field_mutable:demo.Config.tracer_configuration)
  return _internal_mutable_tracer_configuration();
}
inline void Config::set_allocated_tracer_configuration(PROTOBUF_NAMESPACE_ID::Struct* tracer_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracer_configuration_);
  }
  if (tracer_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracer_configuration)->GetArena();
    if (message_arena != submessage_arena) {
      tracer_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracer_configuration, submessage_arena);
    }
    
  } else {
    
  }
  tracer_configuration_ = tracer_configuration;
  // @@protoc_insertion_point(field_set_allocated:demo.Config.tracer_configuration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace demo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_2eproto
